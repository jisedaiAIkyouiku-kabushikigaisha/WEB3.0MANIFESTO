# 📘 WEB3.0 Roles Specification  
## Steward Engineer & Architect Engineer（Ver.1.0）

---

## 1. 🧭 前提

WEB3.0は単なる技術進化ではなく、「分散型価値観」と「再定義された信頼」を基盤とした新しい社会設計の時代である。

その中で、従来の「Developer」「Engineer」という職能は再分化され、次の2つの新しい役割が登場する：

- Steward Engineer（スチュワード・エンジニア） 
- Architect Engineer（アーキテクト・エンジニア）

---

## 2. 🧑‍🏫 用語定義

| 用語 | 定義 |
|------|------|
| **Steward Engineer** | 情報・プロトコル・意味の継承と育成に責任を持つ技術的守人。プロジェクトや知識体系の保全と倫理的ガイドラインの維持を担う。 |
| **Architect Engineer** | 技術と思想を構造化し、問いを設計する技術的構造家。プロトコル、UX、データ構造、対話設計を含む“世界観エンジニア”。 |

---

## 3. 📐 構成比較

| 項目 | Steward Engineer | Architect Engineer |
|------|------------------|--------------------|
| 主な役割 | 意味・プロジェクトの守護と保全 | 構造・問い・プロトコルの設計 |
| 主眼 | 継続性・倫理性・透明性 | 創発性・構造性・跳躍性 |
| アウトプット | ロードマップ、ガイドライン、ライセンス、マニフェストの進化管理 | プロトコル設計図、情報構造、UX定義、概念モデリング |
| 時間軸 | 保守・継承・共鳴 | 発明・設計・初期跳躍 |
| 関わるレイヤー | Documentation, Community, Governance | System Design, Interaction Flow, Protocol Stack |
| キーワード | 信用・保全・文化 | 跳躍・構造・意味生成 |

---

## 4. 📦 担当領域（モジュール別）

| 領域 | Steward Engineer | Architect Engineer |
|------|------------------|--------------------|
| `README.md` | 持続性ある思想説明・更新管理 | 初期文脈と世界観の構造記述 |
| `docs/manifesto.md` | 宣言のバージョニング・表現管理 | 宣言の構文構造・抽象設計 |
| `protocols.md` | 実装手順の倫理的運用ルール | プロトコルの形式設計と分岐構造 |
| `ROADMAP.md` | 保守・進化の整合性チェック | 展開フローと構造遷移の設計 |
| `CONTRIBUTING.md` | 貢献者の共鳴ルール設計 | 構造的な貢献導線の設計 |
| `LICENSE` | ライセンスの道徳的判断・整備 | 利用構造の設計（条件・範囲） |

---

## 5. 💼 求められる資質・スキル

### Steward Engineer に必要なもの
- 情報設計と管理のリテラシー（GitHub、ドキュメント設計）
- 倫理・透明性・合意形成への配慮
- 問いを削除せず「残し方を設計する」感性

### Architect Engineer に必要なもの
- システム思考／構造的思考力
- 詩性・問い・UXの抽象モデリング力
- GPT・Protocol・情報対話構造への理解

---

## 6. 🌀 コラボレーション構造

```mermaid
flowchart LR
    A[Architect Engineer] -->|設計/構造化| B[Protocol/Manifest]
    B --> C[Steward Engineer]
    C -->|運用/育成| D[コミュニティ・リーダー・拡張者]
    D -->|フィードバック| A
